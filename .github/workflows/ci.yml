name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Go code is not formatted. Run 'go fmt ./...'"
            gofmt -d .
            exit 1
          fi

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Check test coverage
        run: |
          go tool cover -func=coverage.out
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Coverage is below 70%"
            exit 1
          fi

      - name: Upload coverage to artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

  build:
    name: Build Lambda Functions
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Build Scheduler Lambda
        run: |
          GOOS=linux GOARCH=amd64 go build -tags lambda.norpc -o build/bootstrap ./cmd/scheduler
          cd build && zip scheduler.zip bootstrap && cd ..

      - name: Build Processor Lambda
        run: |
          GOOS=linux GOARCH=amd64 go build -tags lambda.norpc -o build/bootstrap ./cmd/processor
          cd build && zip processor.zip bootstrap && cd ..

      - name: Build WebAPI Lambda
        run: |
          GOOS=linux GOARCH=amd64 go build -tags lambda.norpc -o build/bootstrap ./cmd/webapi
          cd build && zip webapi.zip bootstrap && cd ..

      - name: Upload Lambda artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-functions
          path: build/*.zip

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'

      - name: Upload gosec results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'gosec-results.sarif'
